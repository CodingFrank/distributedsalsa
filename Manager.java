package assignment2;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.io.*;
import java.util.*;

public class Manager extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		Manager instance = (Manager)new Manager(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new Manager(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return Manager.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new Manager(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return Manager.getReferenceByLocation(new UAL(ual)); }
	public Manager(boolean o, UAN __uan)	{ super(false,__uan); }
	public Manager(boolean o, UAL __ual)	{ super(false,__ual); }
	public Manager(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public Manager(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public Manager(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public Manager()		{  }
	public Manager(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "assignment2.Manager", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public Manager self;
		public void updateSelf(ActorReference actorReference) {
			((Manager)actorReference).setUAL(getUAL());
			((Manager)actorReference).setUAN(getUAN());
			self = new Manager(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public void preAct(String[] arguments) {
			getActorMemory().getInverseList().removeInverseReference("rmsp://me",1);
			{
				Object[] __args={arguments};
				self.send( new Message(self,self, "act", __args, null,null,false) );
			}
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "assignment2.Manager$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		int numberOfRankers;
		String inputFile;
		Double[][] cell;
		long startTime;
		String theaterConfiguration;
		String nameServer;
		boolean distributedTrue = false;
		public void act(String args[]) {
			if (args.length<2) {{
				{
					// standardOutput<-println("Usage: java -cp yoursalsajarfile;. assignment2.Manager <numberOfRankers> "+"<inputFile> <theaterConfiguration> <nameServer>\nnumberofRankers, inputFile are "+"mandatory, \n and both the theaterConfigurationFile and nameServer are required if you are running in a "+"distributed mode.")
					{
						Object _arguments[] = { "Usage: java -cp yoursalsajarfile;. assignment2.Manager <numberOfRankers> "+"<inputFile> <theaterConfiguration> <nameServer>\nnumberofRankers, inputFile are "+"mandatory, \n and both the theaterConfigurationFile and nameServer are required if you are running in a "+"distributed mode." };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				return;
			}
}			else {{
				numberOfRankers = Integer.valueOf(args[0]).intValue();
				inputFile = args[1];
			}
}			if (args.length>=3) {theaterConfiguration = args[2];
}			if (args.length>=4) {{
				distributedTrue = true;
				nameServer = args[3];
			}
}			startTime = System.currentTimeMillis();
			{
				Token token_2_0 = new Token();
				Token token_2_1 = new Token();
				// readData()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "readData", _arguments, null, token_2_0 );
					__messages.add( message );
				}
				// distributeWorkers(token)
				{
					Object _arguments[] = { token_2_0 };
					Message message = new Message( self, self, "distributeWorkers", _arguments, token_2_0, token_2_1 );
					__messages.add( message );
				}
				// outputResult(token)
				{
					Object _arguments[] = { token_2_1 };
					Message message = new Message( self, self, "outputResult", _arguments, token_2_1, null );
					__messages.add( message );
				}
			}
		}
		public int readData() {
			int countOfStars = 0;
			try {
				BufferedReader in = new BufferedReader(new FileReader(inputFile));
				String line = in.readLine();
				countOfStars = Integer.valueOf(line).intValue();
				cell = new Double[countOfStars][3];
				int i = 0;
				for (i = 0; i<countOfStars; i++){
					if ((line=in.readLine())==null) {					{
						// standardOutput<-println("Error: number of stars does not match number of rows in "+inputFile)
						{
							Object _arguments[] = { "Error: number of stars does not match number of rows in "+inputFile };
							Message message = new Message( self, standardOutput, "println", _arguments, null, null );
							__messages.add( message );
						}
					}
}					else {{
						StringTokenizer strTok = new StringTokenizer(line);
						for (int j = 0; j<3; j++)cell[i][j] = Double.valueOf(strTok.nextToken());
					}
}				}
				if (i!=countOfStars) {				{
					// standardOutput<-println("Mismatch between number of stars and number of rows in "+inputFile)
					{
						Object _arguments[] = { "Mismatch between number of stars and number of rows in "+inputFile };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
}			}
			catch (IOException ioEx) {
				{
					// standardOutput<-println("Iput file cannot be openned, please first verify the input file "+inputFile+": "+ioEx.getMessage())
					{
						Object _arguments[] = { "Iput file cannot be openned, please first verify the input file "+inputFile+": "+ioEx.getMessage() };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
			}

			return countOfStars;
		}
		public String distributeWorkers(int countOfStars) {
			Worker[] workers = new Worker[numberOfRankers];
			if (distributedTrue) {{
				Vector theaters = new Vector();
				String theater;
				try {
					BufferedReader in = new BufferedReader(new FileReader(theaterConfiguration));
					while ((theater=in.readLine())!=null) {
						theaters.add(theater);
					}
					in.close();
				}
				catch (IOException ioe) {
					{
						// standardOutput<-println("Error: Can't open the file "+theaterConfiguration+" for reading.")
						{
							Object _arguments[] = { "Error: Can't open the file "+theaterConfiguration+" for reading." };
							Message message = new Message( self, standardOutput, "println", _arguments, null, null );
							__messages.add( message );
						}
					}
				}

				for (int i = 0; i<numberOfRankers; i++){
					{
						// standardOutput<-println("Sending worker "+i+" with Name Server uan://"+nameServer+"/assignment2_"+i+" to theater "+"rmsp://"+theaters.get(i%theaters.size())+"/assignment2_"+i)
						{
							Object _arguments[] = { "Sending worker "+i+" with Name Server uan://"+nameServer+"/assignment2_"+i+" to theater "+"rmsp://"+theaters.get(i%theaters.size())+"/assignment2_"+i };
							Message message = new Message( self, standardOutput, "println", _arguments, null, null );
							__messages.add( message );
						}
					}
					workers[i] = ((Worker)new Worker(new UAN("uan://"+nameServer+"/a"+i), new UAL("rmsp://"+theaters.get(i%theaters.size())+"/a"+i),this).construct());
				}
			}
}			else {{
				for (int i = 0; i<numberOfRankers; i++)workers[i] = ((Worker)new Worker(this).construct());
			}
}			{
				// standardOutput<-println(numberOfRankers+" actors are generated to do the computing of "+countOfStars+" stars.")
				{
					Object _arguments[] = { numberOfRankers+" actors are generated to do the computing of "+countOfStars+" stars." };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
			{
				Token token_2_0 = new Token();
				// join block
				token_2_0.setJoinDirector();
				int starNum = 0;
				for (int i = 0; i<numberOfRankers-1; i++){
					double starsToCalc = (countOfStars-starNum-0.5)-Math.sqrt(Math.pow(countOfStars-starNum-0.5, 2)-(Math.pow(countOfStars, 2)-countOfStars)/numberOfRankers);
					int starsPerWorker = (int)Math.floor(starsToCalc);
					{
						// workers[i]<-calculateDistances(starNum, starNum+starsPerWorker-1, cell)
						{
							Object _arguments[] = { starNum, starNum+starsPerWorker-1, cell };
							Message message = new Message( self, workers[i], "calculateDistances", _arguments, null, token_2_0 );
							__messages.add( message );
						}
					}
					starNum += starsPerWorker;
				}
				int starsPerLastWorker = countOfStars-starNum;
				{
					// workers[numberOfRankers-1]<-calculateDistances(starNum, starNum+starsPerLastWorker-1, cell)
					{
						Object _arguments[] = { starNum, starNum+starsPerLastWorker-1, cell };
						Message message = new Message( self, workers[numberOfRankers-1], "calculateDistances", _arguments, null, token_2_0 );
						__messages.add( message );
					}
				}
				addJoinToken(token_2_0);
				// caculateResults(token)
				{
					Object _arguments[] = { token_2_0 };
					Message message = new Message( self, self, "caculateResults", _arguments, token_2_0, currentMessage.getContinuationToken() );
					__messages.add( message );
				}
				throw new CurrentContinuationException();
			}
		}
		public String caculateResults(Object[] processedData) {
			MatrixSaver[] results = new MatrixSaver[cell.length];
			for (int i = 0; i<cell.length; i++)results[i] = new MatrixSaver(i);
			{
				// standardOutput<-println("Number of results arrays to process: "+processedData.length)
				{
					Object _arguments[] = { "Number of results arrays to process: "+processedData.length };
					Message message = new Message( self, standardOutput, "println", _arguments, null, null );
					__messages.add( message );
				}
			}
			for (int i = 0; i<processedData.length; i++){
				MatrixSaver[] rcArr = (MatrixSaver[])processedData[i];
				{
					// standardOutput<-println("Size of results array "+i+": "+rcArr.length)
					{
						Object _arguments[] = { "Size of results array "+i+": "+rcArr.length };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				for (int j = 0; j<rcArr.length; j++){
					MatrixSaver rc = rcArr[j];
					results[rc.getStar()].updateMinDist(rc.getMinDist(), rc.getMinDistStars());
					results[rc.getStar()].updateMaxDist(rc.getMaxDist(), rc.getMaxDistStars());
					results[rc.getStar()].addToSumDists(rc.getSumDists());
				}
			}
			double minDist = Double.MAX_VALUE;
			Vector minDistPairs = new Vector();
			double maxDist = 0.0;
			Vector maxDistPairs = new Vector();
			double minMaxDistance = Double.MAX_VALUE;
			Vector hubStars = new Vector();
			double maxMinDistance = 0.0;
			Vector jailStars = new Vector();
			double minAvgDistance = Double.MAX_VALUE;
			Vector capStars = new Vector();
			for (int i = 0; i<cell.length; i++){
				MatrixSaver rc = results[i];
				if (rc.getMinDist()<minDist) {minDistPairs.clear();
}				if (rc.getMinDist()<=minDist) {{
					for (Iterator iter = rc.getMinDistStars().iterator(); iter.hasNext(); ){
						Integer[] pair = new Integer[2];
						pair[0] = rc.getStar();
						pair[1] = (Integer)iter.next();
						boolean exists = false;
						for (Iterator eIter = minDistPairs.iterator(); eIter.hasNext()&&!exists; ){
							Integer[] vInt = (Integer[])eIter.next();
							if ((pair[0].equals(vInt[0])&&pair[1].equals(vInt[1]))||(pair[1].equals(vInt[0])&&pair[0].equals(vInt[1]))) {exists = true;
}						}
						if (!exists) {minDistPairs.add(pair);
}					}
					minDist = rc.getMinDist();
				}
}				if (rc.getMaxDist()>maxDist) {maxDistPairs.clear();
}				if (rc.getMaxDist()>=maxDist) {{
					for (Iterator iter = rc.getMaxDistStars().iterator(); iter.hasNext(); ){
						Integer[] pair = new Integer[2];
						pair[0] = rc.getStar();
						pair[1] = (Integer)iter.next();
						boolean exists = false;
						for (Iterator eIter = maxDistPairs.iterator(); eIter.hasNext()&&!exists; ){
							Integer[] vInt = (Integer[])eIter.next();
							if ((pair[0].equals(vInt[0])&&pair[1].equals(vInt[1]))||(pair[1].equals(vInt[0])&&pair[0].equals(vInt[1]))) {exists = true;
}						}
						if (!exists) {maxDistPairs.add(pair);
}					}
					maxDist = rc.getMaxDist();
				}
}				if (rc.getMaxDist()<minMaxDistance) {hubStars.clear();
}				if (rc.getMaxDist()<=minMaxDistance) {{
					minMaxDistance = rc.getMaxDist();
					for (Iterator iter = rc.getMaxDistStars().iterator(); iter.hasNext(); ){
						Integer otherStar = (Integer)iter.next();
						Integer[] pair = new Integer[2];
						pair[0] = rc.getStar();
						pair[1] = otherStar;
						hubStars.add(pair);
					}
				}
}				if (rc.getMinDist()>maxMinDistance) {jailStars.clear();
}				if (rc.getMinDist()>=maxMinDistance) {{
					maxMinDistance = rc.getMinDist();
					for (Iterator iter = rc.getMinDistStars().iterator(); iter.hasNext(); ){
						Integer otherStar = (Integer)iter.next();
						Integer[] pair = new Integer[2];
						pair[0] = rc.getStar();
						pair[1] = otherStar;
						jailStars.add(pair);
					}
				}
}				double avgDist = rc.getSumDists()/(cell.length-1);
				if (avgDist<minAvgDistance) {capStars.clear();
}				if (avgDist<=minAvgDistance) {{
					minAvgDistance = avgDist;
					capStars.add(rc.getStar());
				}
}			}
			StringBuilder sb = new StringBuilder();
			sb.append(minDist+" // minimal pairwise distance\n");
			for (Iterator iter = minDistPairs.iterator(); iter.hasNext(); ){
				Integer[] iArr = (Integer[])iter.next();
				sb.append(getStarString(cell[iArr[0]])+"\n"+iArr[1]+" "+getStarString(cell[iArr[1]])+"\n");
			}
			sb.append("\n");
			sb.append(maxDist+" // maximal pairwise distance\n");
			for (Iterator iter = maxDistPairs.iterator(); iter.hasNext(); ){
				Integer[] iArr = (Integer[])iter.next();
				sb.append(getStarString(cell[iArr[0]])+"\n"+getStarString(cell[iArr[1]])+"\n");
			}
			sb.append("\n");
			sb.append(minMaxDistance+" // minimum maximal distance\n");
			for (Iterator iter = hubStars.iterator(); iter.hasNext(); ){
				Integer[] stars = (Integer[])iter.next();
				sb.append(getStarString(cell[stars[0]])+"\n"+getStarString(cell[stars[1]])+"\n");
			}
			sb.append("\n");
			sb.append(maxMinDistance+" // maximum minimal distance\n");
			for (Iterator iter = jailStars.iterator(); iter.hasNext(); ){
				Integer[] stars = (Integer[])iter.next();
				sb.append(getStarString(cell[stars[0]])+"\n"+getStarString(cell[stars[1]])+"\n");
			}
			sb.append("\n");
			sb.append(minAvgDistance+" // minimal average distance\n");
			for (Iterator iter = capStars.iterator(); iter.hasNext(); ){
				Integer star = (Integer)iter.next();
				sb.append(getStarString(cell[star])+"\n");
			}
			sb.append("\n");
			return sb.toString();
		}
		public void outputResult(String resultStr) {
			long endTime = System.currentTimeMillis();
			long runTime = (endTime-startTime)/1000;
			{
				Token token_2_0 = new Token();
				// standardOutput<-println("The total running time for the whole process is: "+runTime+"seconds.")
				{
					Object _arguments[] = { "The total running time for the whole process is: "+runTime+"seconds." };
					Message message = new Message( self, standardOutput, "println", _arguments, null, token_2_0 );
					__messages.add( message );
				}
				// standardOutput<-println(resultStr)
				{
					Object _arguments[] = { resultStr };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_0, null );
					__messages.add( message );
				}
			}
		}
		private String getStarString(Double[] starXYZ) {
			return starXYZ[0]+" "+starXYZ[1]+" "+starXYZ[2];
		}
	}
}